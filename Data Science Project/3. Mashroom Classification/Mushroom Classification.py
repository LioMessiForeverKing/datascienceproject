# -*- coding: utf-8 -*-
"""MushroomClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17jVH6MW_46Ttdu0iFffDajLZqYozMHBM

**Understanding the Features of Mushroom Dataset**

**Attribute Information:** (classes: edible=e, poisonous=p)

•	cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s

•	cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s

•	cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y

•	bruises: bruises=t,no=f

•	odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s

•	gill-attachment: attached=a,descending=d,free=f,notched=n

•	gill-spacing: close=c,crowded=w,distant=d

•	gill-size: broad=b,narrow=n

•	gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y

•	stalk-shape: enlarging=e,tapering=t

•	stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?

•	stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s

•	stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s

•	stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y

•	stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y

•	veil-type: partial=p,universal=u

•	veil-color: brown=n,orange=o,white=w,yellow=y

•	ring-number: none=n,one=o,two=t

•	ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z

•	spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y

•	population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y

•	habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d

** Importing Libraries**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split



"""** Reading Dataset**"""

data=pd.read_csv('/content/mushrooms.csv')

data.head()



"""**Data Preprocessing-Label Encoding**"""

mapping=list()

encoder=LabelEncoder()

for column in range(len(data.columns)):
  data[data.columns[column]]=encoder.fit_transform(data[data.columns[column]])
  mapping_dict={index:label for index,label in enumerate(encoder.classes_)}
  mapping.append(mapping_dict)

mapping



"""Splitting Data into X and Y"""

X=data.drop('class',axis=1)
Y=data['class']

X

Y

scaler=StandardScaler()

X=pd.DataFrame(scaler.fit_transform(X),columns=X.columns)

X



"""**Splitting into Training and Testing Dataset**"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)

X_train

X_test



"""**Model Selection and Score-Logistic Regression and SVM**"""

lrmodel=LogisticRegression()
svmmodel=SVC(C=1.0,kernel='rbf')

lrmodel.fit(X_train,Y_train)

svmmodel.fit(X_train,Y_train)

print(f"Logistic Regression: {lrmodel.score(X_test,Y_test)}")

print(f"Support Vector Machine: {svmmodel.score(X_test,Y_test)}")

